import os
import json
import base64
import logging
import asyncio
import time
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackContext, filters
from telegram.constants import ParseMode

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TELEGRAM_BOT_TOKEN = "7639285272:AAH-vhuRyoVDMNjqyvkDgfsZw7_d5GEc77Q"
ADMIN_ID = 8199808170
ADMIN_USERNAME = "aunex"  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ANTHROPIC_API_KEY = "sk-Rr88gyoBb4RD9ipDp4vHqXa9W0CkA8piOCN8swUfvqsCiuOf2j5Eg-aNqRwgUKyHw6n2qvtlIb1uSV385QUfpA"
ANTHROPIC_API_URL = "https://api.langdock.com/anthropic/eu/v1/messages"
MAX_MEMORY_MESSAGES = 20  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 20 —Å–æ–æ–±—â–µ–Ω–∏–π
MAX_MESSAGE_LENGTH = 4000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users_data = {}
# –ü–∞–º—è—Ç—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_memory = {}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
USER_KEYBOARD_COMMANDS = ["üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"]

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_keyboard():
    keyboard = [USER_KEYBOARD_COMMANDS]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
def load_users_data():
    global users_data
    try:
        if os.path.exists('users_data.json'):
            with open('users_data.json', 'r', encoding='utf-8') as file:
                users_data = json.load(file)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        users_data = {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
def save_users_data():
    try:
        with open('users_data.json', 'w', encoding='utf-8') as file:
            json.dump(users_data, file, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def init_user(user_id):
    if str(user_id) not in users_data:
        users_data[str(user_id)] = {
            "unlimited": True,  # –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç –±–µ–∑–ª–∏–º–∏—Ç
            "name": "",
            "username": "",
        }
        save_users_data()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def init_user_memory(user_id):
    if user_id not in user_memory:
        user_memory[user_id] = []

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API Anthropic
async def query_anthropic(messages):
    headers = {
        "Content-Type": "application/json",
        "x-api-key": ANTHROPIC_API_KEY
    }
    
    payload = {
        "model": "claude-3-7-sonnet-20250219",
        "messages": messages,
        "max_tokens": 4000
    }
    
    try:
        import requests
        response = requests.post(ANTHROPIC_API_URL, json=payload, headers=headers)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Anthropic API: {e}")
        return {"error": str(e)}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏
def split_text(text, max_length=MAX_MESSAGE_LENGTH):
    if len(text) <= max_length:
        return [text]
    
    parts = []
    current_part = ""
    sentences = text.split(". ")
    
    for sentence in sentences:
        if len(current_part) + len(sentence) + 2 <= max_length:
            if current_part:
                current_part += ". " + sentence
            else:
                current_part = sentence
        else:
            if current_part:
                parts.append(current_part + ".")
                current_part = sentence
            else:
                # –ï—Å–ª–∏ –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ –ø–æ —Å–ª–æ–≤–∞–º
                words = sentence.split(" ")
                current_part = ""
                for word in words:
                    if len(current_part) + len(word) + 1 <= max_length:
                        if current_part:
                            current_part += " " + word
                        else:
                            current_part = word
                    else:
                        parts.append(current_part)
                        current_part = word
                if current_part:
                    parts.append(current_part)
                current_part = ""
    
    if current_part:
        parts.append(current_part)
    
    return parts

# –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Å—Ç—è–º–∏
async def send_long_message(update, text, reply_markup=None):
    parts = split_text(text)
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é —á–∞—Å—Ç–µ–π –µ—Å–ª–∏ —á–∞—Å—Ç–µ–π –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π
    if len(parts) > 1:
        for i, part in enumerate(parts):
            # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å –ø–æ–ª—É—á–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            if i == len(parts) - 1 and reply_markup:
                await update.message.reply_text(f"–ß–∞—Å—Ç—å {i+1}/{len(parts)}:\n\n{part}", reply_markup=reply_markup)
            else:
                await update.message.reply_text(f"–ß–∞—Å—Ç—å {i+1}/{len(parts)}:\n\n{part}")
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram
            await asyncio.sleep(0.5)
    else:
        await update.message.reply_text(parts[0], reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    username = update.effective_user.username
    
    init_user(user_id)
    init_user_memory(user_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users_data[str(user_id)]["name"] = user_name
    users_data[str(user_id)]["username"] = username or ""
    save_users_data()
    
    welcome_message = (
        "üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç Claude 3.7 Sonnet!* üåü\n\n"
        "–Ø - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ –±–∞–∑–µ Claude 3.7 Sonnet –æ—Ç Anthropic. "
        "–Ø –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø–æ–º–æ–≥–∞—Ç—å —Å —Ç–µ–∫—Å—Ç–∞–º–∏.\n\n"
        "üì± *–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n"
        "‚Ä¢ –û—Ç–≤–µ—Ç—ã –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
        "‚Ä¢ –ü–æ–º–æ—â—å –≤ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤\n"
        "‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏\n\n"
        "‚å®Ô∏è *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:*\n"
        "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é - —Å–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞\n"
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ! üöÄ"
    )
    
    await update.message.reply_text(welcome_message, parse_mode=ParseMode.MARKDOWN, reply_markup=get_user_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"
async def reset_command(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    init_user_memory(user_id)
    user_memory[user_id] = []
    
    await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞! üßπ")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "‚ÑπÔ∏è –ü–æ–º–æ—â—å"
async def help_command(update: Update, context: CallbackContext):
    help_text = (
        "üîç *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:*\n\n"
        "üìù *–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n"
        "‚Ä¢ –ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n"
        "‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ –±–æ–ª—å—à–∏–µ —Ç–µ–∫—Å—Ç—ã —Ä–∞–∑–±–∏—Ç—ã–º–∏ –Ω–∞ —É–¥–æ–±–Ω—ã–µ —á–∞—Å—Ç–∏\n"
        "‚Ä¢ –ë–æ—Ç –ø–æ–º–Ω–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞\n\n"
        "‚ö†Ô∏è *–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:*\n"
        "‚Ä¢ –í–∏–¥–µ–æ, –∞—É–¥–∏–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã\n\n"
        "‚å®Ô∏è *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:*\n"
        "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞\n"
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "üí∞ –£ –≤–∞—Å –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É!\n"
    )
    
    await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    init_user(user_id)
    init_user_memory(user_id)
    
    user_message = update.message.text
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    if user_message in USER_KEYBOARD_COMMANDS:
        if user_message == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é":
            await reset_command(update, context)
            return
        elif user_message == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
            await help_command(update, context)
            return
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–∞–º—è—Ç—å
    user_memory[user_id].append({"role": "user", "content": user_message})
    
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö MAX_MEMORY_MESSAGES —Å–æ–æ–±—â–µ–Ω–∏–π
    if len(user_memory[user_id]) > MAX_MEMORY_MESSAGES:
        user_memory[user_id] = user_memory[user_id][-MAX_MEMORY_MESSAGES:]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç (—Ä–µ—Ñ–µ—Ä–∞—Ç, —ç—Å—Å–µ –∏ —Ç.–¥.)
    is_long_content_request = any(keyword in user_message.lower() for keyword in 
                               ["—Ä–µ—Ñ–µ—Ä–∞—Ç", "—ç—Å—Å–µ", "—Å–æ—á–∏–Ω–µ–Ω–∏–µ", "—Å—Ç–∞—Ç—å—è", "–¥–æ–∫–ª–∞–¥", "—Ç–µ–∫—Å—Ç –Ω–∞", 
                                "–Ω–∞–ø–∏—à–∏ –±–æ–ª—å—à–æ–π", "3000 —Å–ª–æ–≤", "2000 —Å–ª–æ–≤", "–º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞",
                                "—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç", "–ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏", "–ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑"])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
    await update.message.chat.send_action("typing")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Anthropic
    response = await query_anthropic(user_memory[user_id])
    
    if "error" in response:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {response['error']}")
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API
    if "content" in response and len(response["content"]) > 0:
        assistant_response = response["content"][0]["text"]
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–º–æ—â–Ω–∏–∫–∞ –≤ –ø–∞–º—è—Ç—å
        user_memory[user_id].append({"role": "assistant", "content": assistant_response})
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —ç—Ç–æ –±–æ–ª—å—à–æ–π –æ—Ç–≤–µ—Ç
        if is_long_content_request or len(assistant_response) > MAX_MESSAGE_LENGTH:
            await send_long_message(update, assistant_response, get_user_keyboard())
        else:
            await update.message.reply_text(assistant_response, reply_markup=get_user_keyboard())
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç Claude. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=get_user_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
async def handle_photo(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    init_user(user_id)
    init_user_memory(user_id)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –Ω–∞–∏–ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
    photo_file = await update.message.photo[-1].get_file()
    photo_bytes = await photo_file.download_as_bytearray()
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ base64
    image_base64 = base64.b64encode(photo_bytes).decode('utf-8')
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    caption = update.message.caption or "–û–ø–∏—à–∏—Ç–µ —ç—Ç—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç
    is_long_content_request = any(keyword in caption.lower() for keyword in 
                               ["—Ä–µ—Ñ–µ—Ä–∞—Ç", "—ç—Å—Å–µ", "—Å–æ—á–∏–Ω–µ–Ω–∏–µ", "—Å—Ç–∞—Ç—å—è", "–¥–æ–∫–ª–∞–¥", "—Ç–µ–∫—Å—Ç –Ω–∞", 
                                "–Ω–∞–ø–∏—à–∏ –±–æ–ª—å—à–æ–π", "3000 —Å–ª–æ–≤", "2000 —Å–ª–æ–≤", "–º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞",
                                "—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç", "–ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏", "–ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑"])
    
    message_with_image = {
        "role": "user",
        "content": [
            {"type": "text", "text": caption},
            {"type": "image", "source": {"type": "base64", "media_type": "image/jpeg", "data": image_base64}}
        ]
    }
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    text_history = []
    for msg in user_memory[user_id]:
        if isinstance(msg["content"], str):
            text_history.append({"role": msg["role"], "content": msg["content"]})
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    messages_to_send = text_history + [message_with_image]
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Anthropic
    await update.message.chat.send_action("typing")
    response = await query_anthropic(messages_to_send)
    
    if "error" in response:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {response['error']}")
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API
    if "content" in response and len(response["content"]) > 0:
        assistant_response = response["content"][0]["text"]
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–º–æ—â–Ω–∏–∫–∞ –≤ –ø–∞–º—è—Ç—å
        user_memory[user_id].append({"role": "user", "content": caption + " [—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è]"})
        user_memory[user_id].append({"role": "assistant", "content": assistant_response})
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
        if len(user_memory[user_id]) > MAX_MEMORY_MESSAGES:
            user_memory[user_id] = user_memory[user_id][-MAX_MEMORY_MESSAGES:]
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if is_long_content_request or len(assistant_response) > MAX_MESSAGE_LENGTH:
            await send_long_message(update, assistant_response, get_user_keyboard())
        else:
            await update.message.reply_text(assistant_response, reply_markup=get_user_keyboard())
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç Claude. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=get_user_keyboard())

# –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
async def delete_unsupported_message(update: Update, context: CallbackContext):
    try:
        await update.message.delete()
        await update.message.reply_text("–≠—Ç–æ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.", reply_markup=get_user_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def main():
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    load_users_data()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    builder = Application.builder()
    builder.token(TELEGRAM_BOT_TOKEN)
    # –û—Ç–∫–ª—é—á–∞–µ–º job_queue –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–∫–∏ weak reference
    builder.job_queue(None)
    application = builder.build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(
        ~filters.TEXT & ~filters.PHOTO & ~filters.COMMAND, 
        delete_unsupported_message
    ))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ–±-—Ö—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–∞—Ö
    PORT = int(os.environ.get('PORT', '8443'))
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if os.environ.get('USE_WEBHOOK', 'False').lower() == 'true':
        # –î–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ —Å –≤–µ–±-—Ö—É–∫–æ–º
        APP_URL = os.environ.get('APP_URL', '')
        if APP_URL:
            application.run_webhook(
                listen="0.0.0.0",
                port=PORT,
                url_path=TELEGRAM_BOT_TOKEN,
                webhook_url=f"{APP_URL}/{TELEGRAM_BOT_TOKEN}"
            )
            print(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ webhook –Ω–∞ –ø–æ—Ä—Ç—É {PORT}!")
        else:
            print("–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω APP_URL –¥–ª—è webhook —Ä–µ–∂–∏–º–∞")
            application.run_polling()
    else:
        # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å polling
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        application.run_polling()

if __name__ == "__main__":
    main() 